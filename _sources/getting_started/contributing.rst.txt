Contributing
====================

Follow the development set-up instructions under :doc:`installation <installation>`.


Workflow
***********

    1. Create a new branch for your features.
    2. Make your changes, commit, then open a Pull Request on Github. Please make sure your Pull Requests have sufficiently detailed descriptions, and include any critical changes/issues to take note of.
    3. Request a review from Software/Vehicle Dynamics leads. Follow up after reviews
    4. Before you merge, preferably rebase your branch on main and resolve conflicts locally for a clean commit history.

Style
***********

    * `black` for code formatting
    * `pytest` for unit testing
    * `update-dependencies.yml` & `dependabot` for automatically updating dependencies

.. note::

   If you change any files **outside** of the notebooks (.py files), you need to **restart** the runtime
   of the notebook.


How to Use Git
***************

* Create a new branch for your features.

.. code-block:: bash

   git checkout -b branch_name

* Run `git status` to see the changes you have made and the status of your branch. This is a safe and useful command to run before committing.

* If you need to pull the latest changes from the main branch, you can do so with:

.. code-block:: bash

   git checkout main
   git pull

* If you want to reset a file to the last commit (remove all changes), you can do so with:

.. code-block:: bash

   git restore <file>

* Add your changes (stage them) and commit them with a message.

.. code-block:: bash

   git add .
   git commit -m "commit message"

* If you need to unstage change (you don't want to commit it yet), you can do so with:

.. code-block:: bash

   git restore --staged <file or . for all files>

* Once you've commited your changes and have verified you are **NOT on main**, you can push your branch to the remote repository with:

.. code-block:: bash

   git push

* Next go to the repository on github and open a pull request. Add a description of the changes you made and request a review from the Software/Vehicle Dynamics leads.

* If there has been a lot of changes to main while you were working on your branch, you can rebase your branch on main. Note this may cause conflicts.

.. code-block:: bash

    git checkout main
    git pull
    git checkout branch_name
    git rebase main

* This "rewrites" this history, git doesn't like this so you will need to "force push" your branch to the remote repository with:

.. code-block:: bash

   git push --force-with-lease
