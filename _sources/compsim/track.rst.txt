track
=================

.. py:class:: Track

   Competition tracks are represented as lists of corners. Each corner is a 2-element array
   ``[radius (meters), length (decimeters)]``. Both measurements are relative to the centerline.
   (e.g. a corner that has a radius of :math:`9.125~\text{m}` and a centerline length of :math:`57.3~\text{m}`
   will be ``[9.125, 573]``).

   .. note::
      A corner radius larger than :math:`10000~\text{m}` will be interpreted by the code as a straight.

   .. note::
      Internally, the representation for corner length gets converted from decimeters to number of simulation steps,
      where each step moves ``DISTANCE_STEP`` along the centerline. The conversion is done by applying a scaling :math:`\frac{0.1}{DISTANCE\_STEP}`
      to the corner length, then rounding.


    competition.yaml also stores a minimum time for each track, which helps quantify how well our car is doing compared to other cars (for now, the only available numbers are from Michigan 2023)

      The Track class provides functionality to:

   * Create tracks from configuration dictionaries
   * Clean up corner definitions
   * Scale track dimensions
   * Compute event points based on lap times

   .. rubric:: Parameters

   :param corners: Ordered list of corner definitions, where each corner is ``[radius, length]``
   :type corners: list[list[float, float]]
   :param track_best_time: Best achievable time for the track in seconds
   :type track_best_time: float
   :param worst_time_ratio: Ratio defining the worst acceptable time relative to best time
   :type worst_time_ratio: float
   :param min_points: Minimum points that can be earned on the track
   :type min_points: float
   :param max_point_gain: Maximum additional points that can be earned above min_points
   :type max_point_gain: float
   :param scale_time_ratio: Exponent used in points calculation to scale time differences
   :type scale_time_ratio: float

Methods
-------

.. py:classmethod:: Track.from_config(config)

   Creates a Track instance from a configuration dictionary.

   :param config: Configuration dictionary containing track parameters
   :type config: dict
   :returns: A new Track instance
   :rtype: Track

   The configuration dictionary must contain all parameters required by the Track constructor,
   plus:

   * ``distance_step``: Used to convert corner lengths to step counts
   * ``shorten``: Additional scaling factor applied to corner lengths

   .. note::
      This method applies two scaling operations to the corner definitions:

      1. Converts corner lengths from decimeters to simulation steps
      2. Applies an additional scaling factor (currently used for Mich 2023 tracks)

.. py:method:: Track.get_corner_list()

   Returns a deep copy of the original corner list.

   :returns: List of [radius, length] corner definitions
   :rtype: list[list[float, float]]

.. py:method:: Track.get_cleaned_corner_list()

   Returns a deep copy of the cleaned corner list with adjusted radii.

   :returns: List of [radius, length] corner definitions with modified radii
   :rtype: list[list[float, float]]

   .. note::
      The cleaned list has small corner radii increased to improve simulation behavior.
      This adjustment is currently used for Mich 2023 AutoX and Endurance tracks.

.. py:method:: Track.compute_event_points(tyour)

   Computes points earned for a given lap time.

   :param tyour: Your lap time in seconds
   :type tyour: float
   :returns: Points earned for the lap time
   :rtype: float

   Points are calculated using the formula:

   .. math::

      points = min\_points + max\_point\_gain * \frac{(worst\_time/tyour)^{scale} - 1}{(worst\_time/best\_time)^{scale} - 1}

   where:

   * worst_time = best_time * worst_time_ratio
   * scale = scale_time_ratio

Private Methods
--------------------

.. py:staticmethod:: Track.__track_cleanup(corners)

   Internal method that increases the radius of small corners.

   :param corners: List of corner definitions
   :type corners: list[list[float, float]]
   :returns: Modified list of corner definitions
   :rtype: list[list[float, float]]

   For corners with radius â‰¤ 10m, the radius is scaled up using:

   .. math::

      new\_radius = radius * ((20 - radius)/10)^{1.2}

.. py:staticmethod:: Track.__scale_track(corners, percent)

   Internal method that scales corner lengths by a given percentage.

   :param corners: List of corner definitions
   :type corners: list[list[float, float]]
   :param percent: Scale factor to apply to corner lengths
   :type percent: float
   :returns: Modified list of corner definitions with scaled lengths
   :rtype: list[list[float, float]]

   .. note::
      Corner lengths are rounded to the nearest integer after scaling.

Examples
------------

.. code-block:: python

   # Create accel track (a single corner with 100,000m radius)
   config = {
       "corners": [[100000.0, 750.0]],
       "track_best_time": 3.642 # (Georgia Tech 2024)
       "worst_time_ratio": 1.5,
       "min_points": 4.5,
       "max_point_gain": 95.5,
       "scale_time_ratio": 1, # (no effect)
       "distance_step": 0.065, # (meters)
       "shorten": 1.0 # (unchanged)
   }

   track = Track.from_config(config)
